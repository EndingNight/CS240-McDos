Microsoft (R) Macro Assembler Version 6.11		    10/31/19 21:07:09
demo2.asm						     Page 1 - 1


				.model tiny,stdcall
				.8086
				.stack 200h

 0000				.code
					ORG	100h
 0100				start:
 0100  E9 16B9				jmp	setup

 = 000A				num_bytes = 10d

 0103 30 31 32 33 34 35		chars BYTE '0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'
       36 37 38 39 41 42
       43 44 45 46

 0113 2E63 2064 246A 2368	actualascii WORD 2e63h,2064h,246ah,2368h,326dh
       326D

 011D 0000			readmacrosstatus WORD 0			;0 if normal, 1 if disabled

 011F 2E63 2064			c_key WORD 2e63h,2064h
 0123 2064 1769 1372		d_key WORD 2064h,1769h,1372h
 0129 246A 186F 2F76 1265	j_key WORD 246ah,186fh,2f76h,1265h
 0131 2368 1265 266C 1970	h_key WORD 2368h,1265h,266ch,1970h
 0139 326D 256B 2064 1769	m_key WORD 326dh,256bh,2064h,1769h,1372h
       1372

 = 0021				DOS		= 21h
 = 0010				BIOS		= 10h
 = 4C00				TERMINATE	= 4C00h
					
 = 0000				NUL	= 0
 = 000A				LF	= 10
 = 000D				CR	= 13

 0143 63 3A 5C 6D 61 63		MacroFileName	BYTE "c:\macros.dat", NUL
       72 6F 73 2E 64 61
       74 00

 0151 4C 6F 61 64 20 65		AskUser BYTE "Load earlier saved macros? Press 'y' if so:  ",0
       61 72 6C 69 65 72
       20 73 61 76 65 64
       20 6D 61 63 72 6F
       73 3F 20 50 72 65
       73 73 20 27 79 27
       20 69 66 20 73 6F
       3A 20 20 00

 017F 0000			filehandle WORD ?

 0181 0004			len_c_key WORD 4
 0183 0006			len_d_key WORD 6
 0185 0008			len_j_key WORD 8
 0187 0008			len_h_key WORD 8
 0189 000A			len_m_key WORD 10

 018B 0000			status WORD 0

 018D 0000			mybufferptr WORD 0
 018F 0000			readthebuffer WORD 0
 0191  0100 [			mybuffer WORD 256 DUP(?)
        0000
       ]

 0391  000C [			incaseovewr WORD 12 DUP(?)
        0000
       ]

 03A9  0400 [			int9Stack WORD 400h DUP(?)
        0000
       ]
 0BA9				int9label LABEL WORD
 0BA9 0000			oldSPint9 WORD ?
 0BAB 0000			oldSSint9 WORD ?
 0BAD 0000			tempDxHolder WORD ?

 0BAF  0400 [			int16Stack WORD 400h DUP(?)
        0000
       ]
 13AF				int16label LABEL WORD
 13AF 0000			oldSPint16 WORD ?
 13B1 0000			oldSSint16 WORD ?
 13B3 0000			tmpDxHolder WORD ?


 13B5				int9handler PROC
 13B5  FA				cli
					
 13B6  2E: 89 26 0BA9 R			mov	cs:[oldSPint9], sp
 13BB  2E: 8C 16 0BAB R			mov	cs:[oldSSint9], ss
 13C0  2E: 89 16 0BAD R			mov	cs:[tempDxHolder], dx
 13C5  BC 0BA9 R			mov	sp, OFFSET cs:[int9label]
 13C8  8C CA				mov	dx, cs
 13CA  8E D2				mov	ss, dx
 13CC  2E: 8B 16 0BAD R			mov	dx, cs:[tempDxHolder]

 13D1  50				push	ax
 13D2  E4 60				in	al, 60h
 13D4  24 80				and	al, 80h
 13D6  3C 80				cmp	al, 80h
 13D8  75 0A				jne	cs:[restoreax]
 13DA  58				pop	ax
 13DB  9C				pushf
 13DC  2E: FF 1E 14FB R			call	cs:[old_interrupt9]
 13E1  E9 010C				jmp	cs:[bottomint9]

 13E4				restoreax:
 13E4  58				pop	ax
					
 13E5				normalInt:
 13E5  9C				pushf
 13E6  2E: FF 1E 14FB R			call	cs:[old_interrupt9]
 13EB  FA				cli

 13EC  9C				pushf
 13ED  56				push	si
 13EE  06				push	es
 13EF  52				push	dx
 13F0  51				push	cx
 13F1  53				push	bx
 13F2  50				push	ax

					
 13F3  BB 0040				mov	bx, 40h
 13F6  8E C3				mov	es, bx
 13F8  26: 8B 1E 001C			mov	bx, es:[1ch]
 13FD  83 EB 02				sub	bx, 02h
 1400  83 FB 1E				cmp	bx, 1eh
 1403  73 03				jae	cs:[bxisnormal]
 1405  BB 003C				mov	bx, 3ch
 1408				bxisnormal:
 1408  26: 8B 07			mov	ax, es:[bx]
 140B  2E: 8B 1E 011D R			mov	bx, cs:readmacrosstatus

				;	cmp	ax, 0231h
				;	je	cs:[disablemacros]
				;	cmp	ax, 0b30h
				;	je	cs:[enablemacros]
				;	push	ax
				;	mov	ax, cs:readmacrosstatus
				;	cmp	ax, 01h
				;	je	cs:[restoreregs]
				;	pop	ax

 1410  83 FB 01				cmp	bx, 01h
 1413  74 0D				je	cs:[checkifenable]
 1415  3D 0231				cmp	ax, 0231h
 1418  74 1C				je	cs:[disablemacros]
					
 141A  B9 0010				mov	cx, 10h
 141D  BE 0000				mov	si, 00h
 1420  EB 20				jmp	cs:[keylookup]

 1422				checkifenable:
 1422  3D 0B30				cmp	ax, 0b30h
 1425  74 03				je	cs:[enablemacros]
 1427  E9 00BF				jmp	cs:[restoreregs]

 142A				enablemacros:
 142A  50				push	ax
 142B  B8 0000				mov	ax, 00h
 142E  2E: A3 011D R			mov	cs:readmacrosstatus, ax
 1432  58				pop	ax
 1433  E9 00B3				jmp	cs:[restoreregs]

 1436				disablemacros:
 1436  50				push	ax
 1437  B8 0001				mov	ax, 01h
 143A  2E: A3 011D R			mov	cs:readmacrosstatus, ax
 143E  58				pop	ax
 143F  E9 00A7				jmp	cs:[restoreregs]

 1442				keylookup:
 1442  83 F9 00				cmp	cx, 00h
 1445  75 03 E9 009F			je	cs:[restoreregs]

 144A  2E: 3B 84 0113 R			cmp	ax, cs:actualascii[si]
 144F  74 08				je	cs:[foundourkey]
 1451  83 C6 02				add	si, 02h
 1454  83 E9 02				sub	cx, 02h
 1457  EB E9				jmp	cs:[keylookup]

 1459				foundourkey:
 1459  BE 0040				mov	si, 40h
 145C  8E C6				mov	es, si
 145E  26: 8B 36 001C			mov	si, es:[1ch]
 1463  83 EE 02				sub	si, 02h
 1466  83 FE 1E				cmp	si, 1eh
 1469  73 03				jae	cs:[siisnormal]
 146B  BE 003C				mov	si, 3ch
 146E				siisnormal:
 146E  26: 89 36 001C			mov	es:[1ch], si

 1473  BE 0000				mov	si, 00

 1476  3D 2E63				cmp	ax, 2e63h					;c_key
 1479  74 1E				je	cs:[c_keylabel]

 147B  3D 2064				cmp	ax, 2064h					;d_key
 147E  74 28				je	cs:[d_keylabel]

 1480  3D 2368				cmp	ax, 2368h					;h
 1483  74 32				je	cs:[h_keylabel]

 1485  3D 246A				cmp	ax, 246ah					;j
 1488  74 3C				je	cs:[j_keylabel]


 148A  2E: 8B 0E 0189 R			mov	cx, cs:len_m_key
				;	mov	bx, cs:mybufferptr
				;	add	bx, cx
 148F  2E: 89 0E 018D R			mov	cs:mybufferptr, cx
 1494  BB 0139 R			mov	bx, offset cs:m_key
 1497  EB 3C				jmp	cs:[loadmacrointobuffer]

 1499				c_keylabel:
 1499  2E: 8B 0E 0181 R			mov	cx, cs:len_c_key
				;	mov	bx, cs:mybufferptr
				;	add	bx, cx
 149E  2E: 89 0E 018D R			mov	cs:mybufferptr, cx
 14A3  BB 011F R			mov	bx, offset cs:c_key
 14A6  EB 2D				jmp	cs:[loadmacrointobuffer]

 14A8				d_keylabel:
 14A8  2E: 8B 0E 0183 R			mov	cx, cs:len_d_key
				;	mov	bx, cs:mybufferptr
				;	add	bx, cx
 14AD  2E: 89 0E 018D R			mov	cs:mybufferptr, cx
 14B2  BB 0123 R			mov	bx, offset cs:d_key
 14B5  EB 1E				jmp	cs:[loadmacrointobuffer]

 14B7				h_keylabel:
 14B7  2E: 8B 0E 0187 R			mov	cx, cs:len_h_key
				;	mov	bx, cs:mybufferptr
				;	add	bx, cx
 14BC  2E: 89 0E 018D R			mov	cs:mybufferptr, cx
 14C1  BB 0131 R			mov	bx, offset cs:h_key
 14C4  EB 0F				jmp	cs:[loadmacrointobuffer]

 14C6				j_keylabel:
 14C6  2E: 8B 0E 0185 R			mov	cx, cs:len_j_key
				;	mov	bx, cs:mybufferptr
				;	add	bx, cx
 14CB  2E: 89 0E 018D R			mov	cs:mybufferptr, cx
 14D0  BB 0129 R			mov	bx, offset cs:j_key
 14D3  EB 00				jmp	cs:[loadmacrointobuffer]

 14D5				loadmacrointobuffer:
 14D5  3B F1				cmp	si, cx
 14D7  74 10				je	cs:[restoreregs]

 14D9  2E: 8B 07			mov	ax, cs:[bx]
 14DC  2E: 89 84 0191 R			mov	cs:mybuffer[si], ax
 14E1  83 C6 02				add	si, 02h
 14E4  83 C3 02				add	bx, 02h
 14E7  EB EC				jmp	cs:[loadmacrointobuffer]

 14E9				restoreregs:
 14E9  58				pop	ax
 14EA  5B				pop	bx
 14EB  59				pop	cx
 14EC  5A				pop	dx
 14ED  07				pop	es
 14EE  5E				pop	si
 14EF  9D				popf
						
 14F0				bottomint9:
 14F0  2E: 8E 16 0BAB R			mov	ss, cs:[oldSSint9]
 14F5  2E: 8B 26 0BA9 R			mov	sp, cs:[oldSPint9]

 14FA  CF				iret

 14FB 00000000			old_interrupt9 DWORD ?

 14FF				int9handler ENDP

 14FF				int16handler PROC
 14FF  FA				cli

 1500  2E: 89 26 13AF R			mov	cs:[oldSPint16], sp
 1505  2E: 8C 16 13B1 R			mov	cs:[oldSSint16], ss
 150A  2E: 89 16 13B3 R			mov	cs:[tmpDxHolder], dx
 150F  BC 13AF R			mov	sp, OFFSET cs:[int16label]
 1512  8C CA				mov	dx, cs
 1514  8E D2				mov	ss, dx
 1516  2E: 8B 16 13B3 R			mov	dx, cs:[tmpDxHolder]

 151B  9C				pushf
 151C  56				push	si
 151D  06				push	es
 151E  51				push	cx
 151F  53				push	bx
 1520  50				push	ax

 1521  2E: 8B 0E 018D R			mov	cx, cs:mybufferptr
 1526  83 F9 00				cmp	cx, 00
 1529  74 46				je	cs:[restorereadthebuffer]
 152B  BE 0000				mov	si, 00
 152E  2E: 03 36 018F R			add	si, cs:readthebuffer
 1533  83 E9 02				sub	cx, 02h
 1536  2E: 89 0E 018D R			mov	cs:mybufferptr, cx
 153B  2E: A1 018F R			mov	ax, cs:readthebuffer
 153F  83 C0 02				add	ax, 02h
 1542  2E: A3 018F R			mov	cs:readthebuffer, ax

 1546  BB 0040				mov	bx, 40h
 1549  8E C3				mov	es, bx
 154B  26: 8B 1E 001C			mov	bx, es:[1ch]
 1550  2E: 8B 84 0191 R			mov	ax, cs:mybuffer[si]
 1555  26: 89 07			mov	es:[bx], ax

 1558  B8 0002				mov	ax, 02h
 155B  26: 01 06 001C			add	es:[1ch], ax
 1560  B8 003C				mov	ax, 3ch
 1563  26: 39 06 001C			cmp	es:[1ch], ax
 1568  76 28				jbe	cs:[restoreint16regs]
 156A  B8 001E				mov	ax, 1eh
 156D  26: A3 001C			mov	es:[1ch], ax

 1571				restorereadthebuffer:
 1571  BE 0000				mov	si, 00
 1574  2E: 89 36 018F R			mov	cs:readthebuffer, si
 1579  2E: 89 36 018D R			mov	cs:mybufferptr, si
 157E  B9 0100				mov	cx, 256d
 1581  B8 0000				mov	ax, 00

 1584				resetbuffer:
 1584  83 F9 00				cmp	cx, 00
 1587  74 09				je	cs:[restoreint16regs]

 1589  2E: 89 84 0191 R			mov	cs:mybuffer[si], ax
 158E  46				inc	si
 158F  49				dec	cx
 1590  EB F2				jmp	cs:[resetbuffer]

 1592				restoreint16regs:
 1592  58				pop	ax
 1593  5B				pop	bx
 1594  59				pop	cx
 1595  07				pop	es
 1596  5E				pop	si
 1597  9D				popf

 1598  2E: 8E 16 13B1 R			mov	ss, cs:[oldSSint16]
 159D  2E: 8B 26 13AF R			mov	sp, cs:[oldSPint16]

 15A2  2E: FF 2E 15A7 R			jmp	cs:[old_interrupt16]

 15A7 00000000			old_interrupt16 DWORD ?

 15AB				int16handler ENDP

				;-------------------------------------------
 15AB				BiosOutputChar PROC
 15AB  50				push	ax
 15AC  9C				pushf
 15AD  B4 0E				mov	ah, 0eh
 15AF  CD 10				int	16
 15B1  58				pop	ax
 15B2  9D				popf	
 15B3  C3				ret	
 15B4				BiosOutputChar ENDP

				;;; ----------------------------------------------------------------------------
				;;; CreateMacroFile
				;;;
				;;; Creates a file for writing macros
				;;;
				;;; Parameters:
				;;;   None
				;;; Returns:
				;;;   BX = file handle
				;;; ----------------------------------------------------------------------------
				;MacroFileName	BYTE "c:\macros.dat", NUL
 15B4 45 72 72 6F 72 20		CreateMacroFileError BYTE "Error creating file", CR, LF, NUL
       63 72 65 61 74 69
       6E 67 20 66 69 6C
       65 0D 0A 00
 15CA				CreateMacroFile PROC
 15CA  9C				pushf
 15CB  50				push	ax
 15CC  51				push	cx
 15CD  52				push	dx
 15CE  1E				push	ds

 15CF  8C CA				mov	dx, cs
 15D1  8E DA				mov	ds, dx
 15D3  BA 0143 R			mov	dx, OFFSET cs:MacroFileName
 15D6  B9 0002				mov	cx, 2		; Writeable file
 15D9  B4 3C				mov	ah, 03Ch	; Create or truncate file
 15DB  CD 21				int	DOS
					;; Return:
					;; CF clear if successful
					;; AX = file handle
					;; CF set on error
					;; AX = error code (03h,04h,05h) (see #01680 at AH=59h/BX=0000h)
 15DD  73 06				jnc	cs:[done]
 15DF  B0 63				mov	al, 'c'
 15E1  0E E8 FFC6			call	cs:[biosoutputchar]
 15E5				done:
 15E5  8B D8				mov	bx, ax
 15E7  1F				pop	ds
 15E8  5A				pop	dx
 15E9  59				pop	cx
 15EA  58				pop	ax
 15EB  9D				popf
 15EC  C3				ret
 15ED				CreateMacroFile ENDP


 15ED				OpenMacroFile PROC
 15ED  9C				pushf
 15EE  50				push	ax
 15EF  52				push	dx
 15F0  1E				push	ds

					;; AH = 3Dh
					;; AL = access and sharing modes (see #01402)
					;; DS:DX -> ASCIZ filename
					;; CL = attribute mask of files to look for (server call only)

 15F1  8C CA				mov	dx, cs
 15F3  8E DA				mov	ds, dx
 15F5  BA 0143 R			mov	dx, OFFSET cs:MacroFileName
 15F8  B4 3D				mov	ah, 3Dh	; Open file
 15FA  B0 02				mov	al, 2		; Read/write
 15FC  CD 21				int	DOS
					;; Return:
					;; CF clear if successful
					;; AX = file handle
					;; CF set on error
					;; AX = error code (01h,02h,03h,04h,05h,0Ch,56h) (see #01680 at AH=59h)

 15FE  73 06				jnc	cs:done
 1600  B0 6F				mov	al, 'o'
 1602  0E E8 FFA5			call	cs:[biosoutputchar]
 1606				done:
 1606  8B D8				mov	bx, ax
 1608  1F				pop	ds
 1609  5A				pop	dx
 160A  58				pop	ax
 160B  9D				popf
 160C  C3				ret
 160D				OpenMacroFile ENDP

				;;; ----------------------------------------------------------------------------
				;;; WriteFile
				;;;
				;;; Writes a buffer of bytes to a file handle
				;;;
				;;; Parameters:
				;;;   BX = file handle
				;;;   CX = number of bytes to write
				;;;   DS:DX = data to write
				;;; Returns:
				;;;   AX = number of bytes written
				;;; ----------------------------------------------------------------------------

 160D				WriteFile PROC
 160D  9C				pushf
 160E  50				push	ax
					;; AH = 40h
					;; BX = file handle
					;; CX = number of bytes to write
					;; DS:DX -> data to write
 160F  B4 40				mov	ah, 40h
 1611  CD 21				int	DOS
					;; Return:
					;; CF clear if successful
					;; AX = number of bytes actually written
					;; CF set on error
					;; AX = error code (05h,06h) (see #01680 at AH=59h/BX=0000h)
 1613  73 06				jnc	cs:done
 1615  B0 77				mov	al, 'w'
 1617  0E E8 FF90			call	cs:[biosoutputchar]

 161B				done:
 161B  58				pop	ax
 161C  9D				popf
 161D  C3				ret
 161E				WriteFile ENDP

				;;; ----------------------------------------------------------------------------
				;;; CloseFile
				;;;
				;;; Writes a buffer of bytes to a file handle
				;;;
				;;; Parameters:
				;;;   BX = file handle
				;;; Returns:
				;;;   None
				;;; ----------------------------------------------------------------------------

 161E				CloseFile PROC
 161E  9C				pushf
 161F  50				push	ax

					;; AH = 3Eh
					;; BX = file handle

 1620  B4 3E				mov	ah, 3Eh
 1622  CD 21				int	DOS
					;; Return:
					;; CF clear if successful
					;; AX destroyed
					;; CF set on error
					;; AX = error code (06h) (see #01680 at AH=59h/BX=0000h)
 1624  73 06				jnc	cs:done
 1626  B0 63				mov	al, 'c'
 1628  0E E8 FF7F			call	cs:[biosoutputchar]

 162C				done:
 162C  58				pop	ax
 162D  9D				popf
 162E  C3				ret
 162F				CloseFile ENDP

 162F				OldDOSIdleHandler LABEL DWORD
 162F 0000			OldDOSIdleHandlerOffset WORD 0
 1631 0000			OldDOSIdleHandlerSegment WORD 0

 1633				DOSIdleInterruptHandler PROC
 1633  FA				cli

 1634  2E: F6 06 1663 R			test	cs:MacrosNeedSaving, 1
       01
 163A  74 04				jz	cs:nope

 163C  0E E8 003D			call	cs:AttemptToSaveMacros

 1640				nope:
 1640  9C				pushf
 1641  2E: FF 1E 162F R			call	cs:OldDOSIdleHandler
 1646  FB				sti
 1647  CF				iret
 1648				DOSIdleInterruptHandler ENDP

 1648				OldDOSTimerHandler LABEL DWORD
 1648 0000			OldDOSTimerHandlerOffset WORD 0
 164A 0000			OldDOSTimerHandlerSegment WORD 0

 164C				DOSTimerInterruptHandler PROC
 164C  FA				cli
 164D  9C				pushf

 164E  2E: F6 06 1663 R			test	cs:MacrosNeedSaving, 1
       01
 1654  74 04				jz cs:nope

 1656  0E E8 0023			call	cs:AttemptToSaveMacros
 165A				nope:
 165A  9C				pushf
 165B  2E: FF 1E 1648 R			call	cs:OldDOSTimerHandler

 1660  9D				popf
 1661  FB				sti
 1662  CF				iret
 1663				DOSTimerInterruptHandler ENDP

				;;; ----------------------------------------------------------------------------
				;;; SaveMacros
				;;;
				;;; Saves a block of memory to the macros file
				;;;
				;;; Parameters:
				;;;   DX = Offset of macro buffer
				;;;   CX = Size of macro buffer
				;;; Returns:
				;;;   None
				;;; ----------------------------------------------------------------------------
 1663 00			MacrosNeedSaving BYTE 0
 1664 0000			MacroBufferOffset WORD 0
 1666 0000			MacroBufferSize WORD 0
 1668				SaveMacros PROC
 1668  2E: 89 16 1664 R			mov	cs:MacroBufferOffset, dx
 166D  2E: 89 0E 1666 R			mov	cs:MacroBufferSize, cx
 1672  2E: C6 06 1663 R			mov	cs:MacrosNeedSaving, 1
       01
 1678  C3				ret
 1679				SaveMacros ENDP

 1679				INDOSFlag LABEL DWORD
 1679 0000			INDOSSegment WORD 0
 167B 0000			INDOSOffset WORD 0

 167D				AttemptToSaveMacros PROC
 167D  9C				pushf
 167E  56				push	si
 167F  06				push	es

 1680  2E: 8E 06 1679 R			mov	es, cs:INDOSSegment
 1685  2E: 8B 36 167B R			mov	si, cs:INDOSOffset

 168A  26: 8B 74 FF			mov	si, es:[si - 1]
 168E  83 FE 00				cmp	si, 0
 1691  75 0A				jne	cs:[notready]

 1693  0E E8 000A			call	cs:[_SaveMacros]
					;; Put the call to do the actual save here
 1697  2E: C6 06 1663 R			mov	cs:MacrosNeedSaving, 0
       00

 169D				notready:
 169D  07				pop	es
 169E  5E				pop	si
 169F  9D				popf
 16A0  C3				ret
 16A1				AttemptToSaveMacros ENDP

 16A1				_SaveMacros PROC
 16A1  51				push	cx
 16A2  52				push	dx
 16A3  1E				push	ds

 16A4  0E E8 FF22			call	cs:CreateMacroFile
 16A8  8C CA				mov	dx, cs
 16AA  8E DA				mov	ds, dx
 16AC  2E: 8B 16 1664 R			mov	dx, cs:MacroBufferOffset
 16B1  2E: 8B 0E 1666 R			mov	cx, cs:MacroBufferSize
 16B6  0E E8 FF53			call	cs:WriteFile
 16BA  0E E8 FF60			call	cs:CloseFile

 16BE  1F				pop	ds
 16BF  5A				pop	dx
 16C0  59				pop	cx
 16C1  C3				ret
 16C2				_SaveMacros ENDP



 16C2				end_ISR LABEL BYTE


 16C2				installResCode PROC
 16C2  9C				pushf
 16C3  56				push	si
 16C4  06				push	es
 16C5  57				push	di
 16C6  51				push	cx
 16C7  53				push	bx
 16C8  55				push	bp
 16C9  50				push	ax

 16CA  2E: 89 2D			mov	cs:[di], bp	;offset
 16CD  2E: 89 45 02			mov	cs:[di + 2], ax	;segment
 16D1  8C C9				mov	cx, cs
 16D3  FA				cli
 16D4  26: 89 0C			mov	es:[si], cx	;code segment
 16D7  26: 89 5C FE			mov	es:[si-2], bx	;new handler offset
 16DB  FB				sti

 16DC  58				pop	ax
 16DD  5D				pop	bp
 16DE  5B				pop	bx
 16DF  59				pop	cx
 16E0  5F				pop	di
 16E1  07				pop	es
 16E2  5E				pop	si
 16E3  9D				popf
 16E4  C3				ret
 16E5				installResCode ENDP

				;-------------------------------------------

 16E5				uninstallResCode PROC 
 16E5  B9 0000				mov	cx, 0
 16E8  8E C1				mov	es, cx
 16EA  FA				cli
 16EB  26: 89 04			mov	es:[si], ax
 16EE  26: 89 54 02			mov	es:[si+2], dx
 16F2  FB				sti
					
 16F3  C3				ret	
 16F4				uninstallResCode ENDP

				;-------------------------------------------

 16F4				checkForClone PROC			;returns boolean value in bp
 16F4  9C				pushf
 16F5  56				push	si
 16F6  06				push	es
 16F7  52				push	dx
 16F8  51				push	cx
 16F9  53				push	bx
 16FA  50				push	ax

 16FB  8E C0				mov	es, ax
 16FD  BE 13B5 R			mov	si, offset int9handler
 1700  B9 000A				mov	cx, num_bytes
 1703  BF 0001				mov	di, 1d			;assume I have installed myself

 1706				Clone:
 1706  83 F9 00				cmp	cx, 00
 1709  74 18				je	bottomend

 170B  50				push	ax
 170C  B4 0E				mov	ah, 0eh
 170E  B0 2D				mov	al, '-'
 1710  CD 10				int	16
 1712  58				pop	ax

 1713  2E: 8B 14			mov	dx, cs:[si]
 1716  26: 39 17			cmp	es:[bx], dx
 1719  75 05				jne	cleardi
 171B  46				inc	si
 171C  43				inc	bx
 171D  49				dec	cx
 171E  EB E6				jmp	Clone

 1720				cleardi:
 1720  BF 0000				mov	di, 0h

 1723				bottomend:
 1723  58				pop	ax
 1724  5B				pop	bx
 1725  59				pop	cx
 1726  5A				pop	dx
 1727  07				pop	es
 1728  5E				pop	si
 1729  9D				popf
 172A  C3				ret	
 172B				checkForClone ENDP

				;;; ----------------------------------------------------------------------------
				;;; ReadFile
				;;;
				;;; Reads bytes from a file handle into a buffer of bytes
				;;;
				;;; Parameters:
				;;;   BX = file handle
				;;;   CX = number of bytes to read
				;;;   DS:DX = buffer to fill
				;;; Returns:
				;;;   AX = number of bytes written
				;;; ----------------------------------------------------------------------------

 172B				ReadFile PROC
 172B  9C				pushf
 172C  50				push	ax
					;; AH = 3Fh
					;; BX = file handle
					;; CX = number of bytes to read
					;; DS:DX -> buffer for data
 172D  B4 3F				mov	ah, 3Fh
 172F  CD 21				int	DOS
					;; Return:
					;; CF clear if successful
					;; AX = number of bytes actually read (0 if at EOF before call)
					;; CF set on error
					;; AX = error code (05h,06h) (see #01680 at AH=59h/BX=0000h)
 1731  73 0C				jnc	cs:done
 1733  B0 72				mov	al, 'r'
 1735  0E E8 FE72			call	cs:[biosoutputchar]
 1739  2E: A1 4C00			mov	ax, cs:TERMINATE
 173D  CD 21				int	DOS
 173F				done:
 173F  58				pop	ax
 1740  9D				popf
 1741  C3				ret
 1742				ReadFile ENDP

				;;; ----------------------------------------------------------------------------
				;;; InstallFileServices
				;;;
				;;; Enables saving of macro files from a TSR. This function must be called
				;;; from a DOS client.
				;;;
				;;; Parameters:
				;;;   None
				;;; Returns:
				;;;   None
				;;; ----------------------------------------------------------------------------
 = 0034				GET_INDOS = 34h
 1742				InstallFileServices PROC
 1742  50				push	ax
 1743  53				push	bx
 1744  52				push	dx
 1745  1E				push	ds
 1746  06				push	es

 1747  2E: C6 06 1663 R			mov	cs:MacrosNeedSaving, 0
       00
 174D  B4 34				mov	ah, GET_INDOS
 174F  CD 21				int	DOS
 1751  2E: 8C 06 1679 R			mov	cs:INDOSSegment, es
 1756  2E: 89 1E 167B R			mov	cs:INDOSOffset, bx
 175B  B4 35				mov	ah, 35h
 175D  B0 1C				mov	al, 1Ch
 175F  CD 21				int	21h
 1761  2E: 8C 06 164A R			mov	cs:OldDOSTimerHandlerSegment, es
 1766  2E: 89 1E 1648 R			mov	cs:OldDOSTimerHandlerOffset, bx
 176B  B0 28				mov	al, 28h
 176D  CD 21				int	21h
 176F  2E: 8C 06 1631 R			mov	cs:OldDOSIdleHandlerSegment, es
 1774  2E: 89 1E 162F R			mov	cs:OldDOSIdleHandlerOffset, bx
 1779  B4 25				mov	ah, 25h
 177B  B0 1C				mov	al, 1Ch
 177D  8C CA				mov	dx, cs
 177F  8E DA				mov	ds, dx
 1781  BA 164C R			mov	dx, DOSTimerInterruptHandler
 1784  CD 21				int	21h
 1786  B0 28				mov	al, 28h
 1788  BA 1633 R			mov	dx, DOSIdleInterruptHandler
 178B  CD 21				int	21h

 178D  07				pop	es
 178E  1F				pop	ds
 178F  5A				pop	dx
 1790  5B				pop	bx
 1791  58				pop	ax
 1792  C3				ret
 1793				InstallFileServices ENDP

				;;; ----------------------------------------------------------------------------
				;;; UninstallFileServices
				;;;
				;;; Unloads the file services. This code must be called from a DOS client.
				;;;
				;;; Parameters:
				;;;   None
				;;; Returns:
				;;;   None
				;;; ----------------------------------------------------------------------------
 1793				UninstallFileServices PROC
 1793  50				push	ax
 1794  52				push	dx
 1795  1E				push	ds

 1796  B4 25				mov	ah, 25h
 1798  B0 1C				mov	al, 1Ch
 179A  2E: 8B 16 164A R			mov	dx, cs:OldDOSTimerHandlerSegment
 179F  8E DA				mov	ds, dx
 17A1  2E: 8B 16 1648 R			mov	dx, cs:OldDOSTimerHandlerOffset
 17A6  CD 21				int	21h
 17A8  B0 28				mov	al, 28h
 17AA  2E: 8B 16 1631 R			mov	dx, cs:OldDOSIdleHandlerSegment
 17AF  8E DA				mov	ds, dx
 17B1  2E: 8B 16 162F R			mov	dx, cs:OldDOSIdleHandlerOffset
 17B6  CD 21				int	21h

 17B8  1F				pop	ds
 17B9  5A				pop	dx
 17BA  58				pop	ax
 17BB  C3				ret
 17BC				UninstallFileServices ENDP

 17BC				setup:
 17BC  B9 0000				mov	cx, 0
 17BF  8E C1				mov	es, cx
 17C1  BE 0024				mov	si, 24h
 17C4  26: 8B 1C			mov	bx, es:[si]	;offset
 17C7  8B EB				mov	bp, bx		;temp storage
 17C9  83 C6 02				add	si, 02h
 17CC  26: 8B 04			mov	ax, es:[si]	;segment

 17CF  0E E8 FF21			call	cs:[checkforClone]
 17D3  83 FF 01				cmp	di, 01d
 17D6  74 48				je	cs:[uninstallMycode]

 17D8				install:	
 17D8  BF 14FB R			mov	di, offset cs:old_interrupt9	;install int9 handler

 17DB  BB 13B5 R			mov	bx, offset cs:int9handler
 17DE  0E E8 FEE0			call	cs:[installResCode]
 17E2  EB 00				jmp	cs:[installint16]

 17E4				installint16:
 17E4  BF 15A7 R			mov	di, offset cs:old_interrupt16	;install int16 handler
 17E7  BE 0058				mov	si, 58h
 17EA  26: 8B 1C			mov	bx, es:[si]
 17ED  8B EB				mov	bp, bx
 17EF  83 C6 02				add	si, 02h
 17F2  26: 8B 04			mov	ax, es:[si]
 17F5  BB 14FF R			mov	bx, offset cs:int16handler
 17F8  0E E8 FEC6			call	cs:[installResCode]

 17FC  0E E8 FF42			call	cs:[InstallFileServices]

				;	mov	si, offset cs:AskUser
				;	mov	cx, lengthof AskUser

				;getinfo:
				;	cmp	cx, 00
				;	je	cs:[wearedone]

				;	mov	al, cs:[si]
				;	call	cs:[biosoutputchar]
				;	dec	cx
				;	inc	si
				;	jmp	cs:[getinfo]

				;wearedone:
				;	mov	ah, 00h
				;	int	16h

				;	cmp	al, 'y'
				;	jne	cs:[nonewmacrosdefined]
 1800  0E E8 FDE9			call	cs:[OpenMacroFile]
 1804  8C CA				mov	dx, cs
 1806  8E DA				mov	ds, dx
 1808  BA 011F R			mov	dx, offset cs:c_key
 180B  B9 0024				mov	cx, 36d
 180E  0E E8 FF19			call	cs:[ReadFile]
 1812  0E E8 FE08			call	cs:[CloseFile]
 1816  B0 79				mov	al, 'y'
 1818  0E E8 FD8F			call	cs:[biosoutputchar]
 181C  EB 29				jmp	cs:[bottom]

 181E				nonewmacrosdefined:
 181E  EB 27				jmp	cs:[bottom]

 1820				uninstallMycode:
 1820  8E C0				mov	es, ax	
 1822  BE 0024				mov	si, 24h				;int num for 9 * 4
 1825  B8 0045				mov	ax, 0045h			;offset for int9
 1828  BA 0585				mov	dx, 0585h			;seg for int9
 182B  0E E8 FEB6			call	cs:[uninstallResCode]

 182F  8E C0				mov	es, ax
 1831  BE 0058				mov	si, 58h				;int num for 16h * 4
 1834  B8 E82E				mov	ax, 0e82eh			;offset for int 16h
 1837  BA F000				mov	dx, 0f000h			;seg for int 16h
 183A  0E E8 FEA7			call	cs:[uninstallResCode]

				;	call	cs:[OpenMacroFile]
				;	mov	filehandle, bx
				;	mov	dx, cs
				;	mov	ds, dx
				;	mov	dx, offset cs:c_key
				;	mov	cx, 36d
				;	mov	bx, filehandle
				;	call	cs:[WriteFile]
				;	call	cs:[CloseFile]

 183E  0E E8 FF51			call	cs:[UninstallFileServices]

 1842  B8 4C00				mov	ax, 4c00h
 1845  CD 21				int	21h
					
 1847				bottom:
 1847  8C CA				mov	dx, cs
 1849  8E DA				mov	ds, dx
 184B  BA 011F R			mov	dx, offset cs:c_key
 184E  B9 0024				mov	cx, 36d
 1851  0E E8 FE13			call	cs:[SaveMacros]
 1855  B0 64				mov	al, 'd'
 1857  0E E8 FD50			call	cs:[biosoutputchar]
 185B  B8 3100				mov	ax, 3100h
 185E  BA 16C2 R			mov	dx, offset end_ISR
 1861  B1 04				mov	cl, 4
 1863  D3 EA				shr	dx, cl
 1865  42				inc	dx
 1866  CD 21				int	21h
					
				END start
Microsoft (R) Macro Assembler Version 6.11		    10/31/19 21:07:09
demo2.asm						     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

DGROUP . . . . . . . . . . . . .	GROUP
_TEXT  . . . . . . . . . . . . .	16 Bit	 1868	  Word	  Public  'CODE'	
_DATA  . . . . . . . . . . . . .	16 Bit	 0000	  Word	  Public  'DATA'	
STACK  . . . . . . . . . . . . .	16 Bit	 0200	  Para	  Stack	  'STACK'	 


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

AttemptToSaveMacros  . . . . . .	P Near	 167D	  _TEXT	Length= 0024 Public STDCALL
  notready . . . . . . . . . . .	L Near	 169D	  _TEXT	
BiosOutputChar . . . . . . . . .	P Near	 15AB	  _TEXT	Length= 0009 Public STDCALL
CloseFile  . . . . . . . . . . .	P Near	 161E	  _TEXT	Length= 0011 Public STDCALL
  done . . . . . . . . . . . . .	L Near	 162C	  _TEXT	
CreateMacroFile  . . . . . . . .	P Near	 15CA	  _TEXT	Length= 0023 Public STDCALL
  done . . . . . . . . . . . . .	L Near	 15E5	  _TEXT	
DOSIdleInterruptHandler  . . . .	P Near	 1633	  _TEXT	Length= 0015 Public STDCALL
  nope . . . . . . . . . . . . .	L Near	 1640	  _TEXT	
DOSTimerInterruptHandler . . . .	P Near	 164C	  _TEXT	Length= 0017 Public STDCALL
  nope . . . . . . . . . . . . .	L Near	 165A	  _TEXT	
InstallFileServices  . . . . . .	P Near	 1742	  _TEXT	Length= 0051 Public STDCALL
OpenMacroFile  . . . . . . . . .	P Near	 15ED	  _TEXT	Length= 0020 Public STDCALL
  done . . . . . . . . . . . . .	L Near	 1606	  _TEXT	
ReadFile . . . . . . . . . . . .	P Near	 172B	  _TEXT	Length= 0017 Public STDCALL
  done . . . . . . . . . . . . .	L Near	 173F	  _TEXT	
SaveMacros . . . . . . . . . . .	P Near	 1668	  _TEXT	Length= 0011 Public STDCALL
UninstallFileServices  . . . . .	P Near	 1793	  _TEXT	Length= 0029 Public STDCALL
WriteFile  . . . . . . . . . . .	P Near	 160D	  _TEXT	Length= 0011 Public STDCALL
  done . . . . . . . . . . . . .	L Near	 161B	  _TEXT	
_SaveMacros  . . . . . . . . . .	P Near	 16A1	  _TEXT	Length= 0021 Public STDCALL
checkForClone  . . . . . . . . .	P Near	 16F4	  _TEXT	Length= 0037 Public STDCALL
  Clone  . . . . . . . . . . . .	L Near	 1706	  _TEXT	
  cleardi  . . . . . . . . . . .	L Near	 1720	  _TEXT	
  bottomend  . . . . . . . . . .	L Near	 1723	  _TEXT	
installResCode . . . . . . . . .	P Near	 16C2	  _TEXT	Length= 0023 Public STDCALL
int16handler . . . . . . . . . .	P Near	 14FF	  _TEXT	Length= 00AC Public STDCALL
  restorereadthebuffer . . . . .	L Near	 1571	  _TEXT	
  resetbuffer  . . . . . . . . .	L Near	 1584	  _TEXT	
  restoreint16regs . . . . . . .	L Near	 1592	  _TEXT	
int9handler  . . . . . . . . . .	P Near	 13B5	  _TEXT	Length= 014A Public STDCALL
  restoreax  . . . . . . . . . .	L Near	 13E4	  _TEXT	
  normalInt  . . . . . . . . . .	L Near	 13E5	  _TEXT	
  bxisnormal . . . . . . . . . .	L Near	 1408	  _TEXT	
  checkifenable  . . . . . . . .	L Near	 1422	  _TEXT	
  enablemacros . . . . . . . . .	L Near	 142A	  _TEXT	
  disablemacros  . . . . . . . .	L Near	 1436	  _TEXT	
  keylookup  . . . . . . . . . .	L Near	 1442	  _TEXT	
  foundourkey  . . . . . . . . .	L Near	 1459	  _TEXT	
  siisnormal . . . . . . . . . .	L Near	 146E	  _TEXT	
  c_keylabel . . . . . . . . . .	L Near	 1499	  _TEXT	
  d_keylabel . . . . . . . . . .	L Near	 14A8	  _TEXT	
  h_keylabel . . . . . . . . . .	L Near	 14B7	  _TEXT	
  j_keylabel . . . . . . . . . .	L Near	 14C6	  _TEXT	
  loadmacrointobuffer  . . . . .	L Near	 14D5	  _TEXT	
  restoreregs  . . . . . . . . .	L Near	 14E9	  _TEXT	
  bottomint9 . . . . . . . . . .	L Near	 14F0	  _TEXT	
uninstallResCode . . . . . . . .	P Near	 16E5	  _TEXT	Length= 000F Public STDCALL


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 0000h	 
@DataSize  . . . . . . . . . . .	Number	 0000h	 
@Interface . . . . . . . . . . .	Number	 0003h	 
@Model . . . . . . . . . . . . .	Number	 0001h	 
@code  . . . . . . . . . . . . .	Text   	 DGROUP
@data  . . . . . . . . . . . . .	Text   	 DGROUP
@fardata?  . . . . . . . . . . .	Text   	 FAR_BSS
@fardata . . . . . . . . . . . .	Text   	 FAR_DATA
@stack . . . . . . . . . . . . .	Text   	 DGROUP
AskUser  . . . . . . . . . . . .	Byte	 0151	  _TEXT	
BIOS . . . . . . . . . . . . . .	Number	 0010h	 
CR . . . . . . . . . . . . . . .	Number	 000Dh	 
CreateMacroFileError . . . . . .	Byte	 15B4	  _TEXT	
DOS  . . . . . . . . . . . . . .	Number	 0021h	 
GET_INDOS  . . . . . . . . . . .	Number	 0034h	 
INDOSFlag  . . . . . . . . . . .	DWord	 1679	  _TEXT	
INDOSOffset  . . . . . . . . . .	Word	 167B	  _TEXT	
INDOSSegment . . . . . . . . . .	Word	 1679	  _TEXT	
LF . . . . . . . . . . . . . . .	Number	 000Ah	 
MacroBufferOffset  . . . . . . .	Word	 1664	  _TEXT	
MacroBufferSize  . . . . . . . .	Word	 1666	  _TEXT	
MacroFileName  . . . . . . . . .	Byte	 0143	  _TEXT	
MacrosNeedSaving . . . . . . . .	Byte	 1663	  _TEXT	
NUL  . . . . . . . . . . . . . .	Number	 0000h	 
OldDOSIdleHandlerOffset  . . . .	Word	 162F	  _TEXT	
OldDOSIdleHandlerSegment . . . .	Word	 1631	  _TEXT	
OldDOSIdleHandler  . . . . . . .	DWord	 162F	  _TEXT	
OldDOSTimerHandlerOffset . . . .	Word	 1648	  _TEXT	
OldDOSTimerHandlerSegment  . . .	Word	 164A	  _TEXT	
OldDOSTimerHandler . . . . . . .	DWord	 1648	  _TEXT	
TERMINATE  . . . . . . . . . . .	Number	 4C00h	 
actualascii  . . . . . . . . . .	Word	 0113	  _TEXT	
bottom . . . . . . . . . . . . .	L Near	 1847	  _TEXT	
c_key  . . . . . . . . . . . . .	Word	 011F	  _TEXT	
chars  . . . . . . . . . . . . .	Byte	 0103	  _TEXT	
d_key  . . . . . . . . . . . . .	Word	 0123	  _TEXT	
end_ISR  . . . . . . . . . . . .	Byte	 16C2	  _TEXT	
filehandle . . . . . . . . . . .	Word	 017F	  _TEXT	
h_key  . . . . . . . . . . . . .	Word	 0131	  _TEXT	
incaseovewr  . . . . . . . . . .	Word	 0391	  _TEXT	
installint16 . . . . . . . . . .	L Near	 17E4	  _TEXT	
install  . . . . . . . . . . . .	L Near	 17D8	  _TEXT	
int16Stack . . . . . . . . . . .	Word	 0BAF	  _TEXT	
int16label . . . . . . . . . . .	Word	 13AF	  _TEXT	
int9Stack  . . . . . . . . . . .	Word	 03A9	  _TEXT	
int9label  . . . . . . . . . . .	Word	 0BA9	  _TEXT	
j_key  . . . . . . . . . . . . .	Word	 0129	  _TEXT	
len_c_key  . . . . . . . . . . .	Word	 0181	  _TEXT	
len_d_key  . . . . . . . . . . .	Word	 0183	  _TEXT	
len_h_key  . . . . . . . . . . .	Word	 0187	  _TEXT	
len_j_key  . . . . . . . . . . .	Word	 0185	  _TEXT	
len_m_key  . . . . . . . . . . .	Word	 0189	  _TEXT	
m_key  . . . . . . . . . . . . .	Word	 0139	  _TEXT	
mybufferptr  . . . . . . . . . .	Word	 018D	  _TEXT	
mybuffer . . . . . . . . . . . .	Word	 0191	  _TEXT	
nonewmacrosdefined . . . . . . .	L Near	 181E	  _TEXT	
num_bytes  . . . . . . . . . . .	Number	 000Ah	 
oldSPint16 . . . . . . . . . . .	Word	 13AF	  _TEXT	
oldSPint9  . . . . . . . . . . .	Word	 0BA9	  _TEXT	
oldSSint16 . . . . . . . . . . .	Word	 13B1	  _TEXT	
oldSSint9  . . . . . . . . . . .	Word	 0BAB	  _TEXT	
old_interrupt16  . . . . . . . .	DWord	 15A7	  _TEXT	
old_interrupt9 . . . . . . . . .	DWord	 14FB	  _TEXT	
readmacrosstatus . . . . . . . .	Word	 011D	  _TEXT	
readthebuffer  . . . . . . . . .	Word	 018F	  _TEXT	
setup  . . . . . . . . . . . . .	L Near	 17BC	  _TEXT	
start  . . . . . . . . . . . . .	L Near	 0100	  _TEXT	
status . . . . . . . . . . . . .	Word	 018B	  _TEXT	
tempDxHolder . . . . . . . . . .	Word	 0BAD	  _TEXT	
tmpDxHolder  . . . . . . . . . .	Word	 13B3	  _TEXT	
uninstallMycode  . . . . . . . .	L Near	 1820	  _TEXT	

	   0 Warnings
	   0 Errors
